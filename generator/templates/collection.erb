// This code generated automatically

package serverscom

import (
  "context"
	"encoding/json"
	"fmt"
	"net/url"
	"strconv"
)

const (
	<%= collection_var_prefix || collection_element_uncapitalized %>ListPath = "<%= resource_path %>"
)

// <%= collection_type_name_plural %>Collection is an interface for interfacing with the collection of <%= collection_element_type %>
// Endpoint: <%= collection_api_url %>
type <%= collection_type_name_plural %>Collection interface {
  IsClean() bool

  HasPreviousPage() bool
  HasNextPage() bool
  HasFirstPage() bool
  HasLastPage() bool

  NextPage(ctx context.Context) ([]<%= collection_element_type %>, error)
  PreviousPage(ctx context.Context) ([]<%= collection_element_type %>, error)
  FirstPage(ctx context.Context) ([]<%= collection_element_type %>, error)
  LastPage(ctx context.Context) ([]<%= collection_element_type %>, error)

  Collect(ctx context.Context) ([]<%= collection_element_type %>, error)
  List(ctx context.Context) ([]<%= collection_element_type %>, error)

  SetPage(page int) <%= collection_type_name_plural %>Collection
  SetPerPage(perPage int) <%= collection_type_name_plural %>Collection

  <% collection_params.each do |param| -%>
  Set<%= "#{param.method_name}(#{param.variable_name} #{param.param_type})" %> <%= collection_type_name_plural %>Collection
  <% end -%>

  Refresh(ctx context.Context) error
}

// <%= collection_type_name_plural %>CollectionHandler handles opertations aroud collection
type <%= collection_type_name_plural %>CollectionHandler struct {
	client              *Client

  <% collection_args_prepared.each do |arg, type_name| -%>
  <%= arg %>
  <% end -%>

	params map[string]string

	clean bool

	rels       map[string]string
	collection []<%= collection_element_type %>
}

// New<%= collection_type_name_plural %>Collection produces a new <%= collection_type_name_plural %>CollectionHandler and represents this as an interface of <%= collection_type_name_plural %>Collection
func New<%= collection_type_name_plural %>Collection(client *Client <%= collection_args_prepared.any? ? ", #{collection_args_prepared.join(', ')}" : '' %>) <%= collection_type_name_plural %>Collection {
	return &<%= collection_type_name_plural %>CollectionHandler{
		client:              client,
    <% collection_args.each do |arg, t| %>
      <%= arg %>: <%= arg %>,
    <% end %>
		params:              make(map[string]string),
		rels:                make(map[string]string),
		clean:               true,
		collection:          make([]<%= collection_element_type %>, 0),
	}
}

// IsClean returns a bool value where true is means, this collection not used yet and doesn't contain any state.
func (col *<%= collection_type_name_plural %>CollectionHandler) IsClean() bool {
	return col.clean
}

// HasPreviousPage returns a bool value where truth is means collection has a previous page.
//
// In case when IsClean returns true, this method will return false, which means no request(s) 
// were made and collection doesn't have metadata to know about pagination. 
//
// First metadata will come with the first called methods such: NextPage, PreviousPage, LastPage, FirstPage, List, Refresh, Collect. 
func (col *<%= collection_type_name_plural %>CollectionHandler) HasPreviousPage() bool {
	return col.hasRel("prev")
}

// HasNextPage returns a bool value where truth is means collection has a next page.
//
// In case when IsClean returns true, this method will return false, which means no request(s) 
// were made and collection doesn't have metadata to know about pagination. 
//
// First metadata will come with the first called methods such: NextPage, PreviousPage, LastPage, FirstPage, List, Refresh, Collect. 
func (col *<%= collection_type_name_plural %>CollectionHandler) HasNextPage() bool {
	return col.hasRel("next")
}

// HasFirstPage returns a bool value where truth is means collection has a first page.
//
// In case when IsClean returns true, this method will return false, which means no request(s) 
// were made and collection doesn't have metadata to know about pagination. 
//
// First metadata will come with the first called methods such: NextPage, PreviousPage, LastPage, FirstPage, List, Refresh, Collect. 
func (col *<%= collection_type_name_plural %>CollectionHandler) HasFirstPage() bool {
	return col.hasRel("first")
}

// HasLastPage returns a bool value where truth is means collection has a last page.
//
// In case when IsClean returns true, this method will return false, which means no request(s) 
// were made and collection doesn't have metadata to know about pagination. 
//
// First metadata will come with the first called methods such: NextPage, PreviousPage, LastPage, FirstPage, List, Refresh, Collect. 
func (col *<%= collection_type_name_plural %>CollectionHandler) HasLastPage() bool {
	return col.hasRel("last")
}

// NextPage navigates to the next page returns a []<%= collection_element_type %>, produces an error, when a 
// collection has no next page.
//
// Before using this method please ensure IsClean returns false and HasNextPage returns true. 
// You can force to load pagination metadata by calling Refresh or List methods.
func (col *<%= collection_type_name_plural %>CollectionHandler) NextPage(ctx context.Context) ([]<%= collection_element_type %>, error) {
	return col.navigate(ctx, "next")
}

// PreviousPage navigates to the previous page returns a []<%= collection_element_type %>, produces an error, when a 
// collection has no previous page.
//
// Before using this method please ensure IsClean returns false and HasPreviousPage returns true. 
// You can force to load pagination metadata by calling Refresh or List methods.
func (col *<%= collection_type_name_plural %>CollectionHandler) PreviousPage(ctx context.Context) ([]<%= collection_element_type %>, error) {
	return col.navigate(ctx, "prev")
}

// FirstPage navigates to the first page returns a []<%= collection_element_type %>, produces an error, when a 
// collection has no first page.
//
// Before using this method please ensure IsClean returns false and HasFirstPage returns true. 
// You can force to load pagination metadata by calling Refresh or List methods.
func (col *<%= collection_type_name_plural %>CollectionHandler) FirstPage(ctx context.Context) ([]<%= collection_element_type %>, error) {
	return col.navigate(ctx, "first")
}

// LastPage navigates to the last page returns a []<%= collection_element_type %>, produces an error, when a 
// collection has no last page.
//
// Before using this method please ensure IsClean returns false and HasLastPage returns true. 
// You can force to load pagination metadata by calling Refresh or List methods.
func (col *<%= collection_type_name_plural %>CollectionHandler) LastPage(ctx context.Context) ([]<%= collection_element_type %>, error) {
	return col.navigate(ctx, "last")
}

// Collect navigates by pages until the last page is reached will be reached and returns accumulated data between pages.
// 
// This method uses NextPage.
func (col *<%= collection_type_name_plural %>CollectionHandler) Collect(ctx context.Context) ([]<%= collection_element_type %>, error) {
	var accumulatedCollectionElements []<%= collection_element_type %>

	currentCollectionElements, err := col.List(ctx)

	if err != nil {
		return nil, err
	}

	for _, element := range currentCollectionElements {
		accumulatedCollectionElements = append(accumulatedCollectionElements, element)
	}

	for col.HasNextPage() {
		nextCollectionElements, err := col.NextPage(ctx)

		if err != nil {
			return nil, err
		}

		for _, element := range nextCollectionElements {
			accumulatedCollectionElements = append(accumulatedCollectionElements, element)
		}
	}

	return accumulatedCollectionElements, nil
}

// List returns a []BandwidthOption limited by pagination.
//
// This method performs request only once when IsClean returns false, also this request doesn't 
// perform request when such methods were called before: NextPage, PreviousPage, LastPage, FirstPage, Refresh, Collect.
//
// In the case when previously called method is Collect, this method returns data from the last page.
func (col *<%= collection_type_name_plural %>CollectionHandler) List(ctx context.Context) ([]<%= collection_element_type %>, error) {
	if col.IsClean() {
		if err := col.Refresh(ctx); err != nil {
			return nil, err
		}
	}

	return col.collection, nil
}

// SetPage sets current page param.
func (col *<%= collection_type_name_plural %>CollectionHandler) SetPage(page int) <%= collection_type_name_plural %>Collection {
	var currentPage string

	if page > 1 {
		currentPage = strconv.Itoa(page)
	} else {
		currentPage = ""
	}

	col.applyParam("page", currentPage)

	return col
}

// SetPerPage sets current per page param.
func (col *<%= collection_type_name_plural %>CollectionHandler) SetPerPage(perPage int) <%= collection_type_name_plural %>Collection {
	var currentPerPage string

	if perPage > 0 {
		currentPerPage = strconv.Itoa(perPage)
	} else {
		currentPerPage = ""
	}

	col.applyParam("per_page", currentPerPage)

	return col
}

<% collection_params.each do |param| -%>
// Set<%= param.method_name %> sets "<%= param.param_name %>" param
func (col *<%= collection_type_name_plural %>CollectionHandler) Set<%= "#{param.method_name}(#{param.variable_name} #{param.param_type})" %> <%= collection_type_name_plural %>Collection {
  col.applyParam("<%= param.param_name %>", <%= param.variable_name %>)

  return col
}

<% end -%>

// Refresh performs the request and then updates accumulated data limited by pagination.
//
// After calling this method accumulated data can be extracted by List method.
func (col *<%= collection_type_name_plural %>CollectionHandler) Refresh(ctx context.Context) error {
	if err := col.fireHTTPRequest(ctx); err != nil {
		return err
	}

	return nil
}

func (col *<%= collection_type_name_plural %>CollectionHandler) fireHTTPRequest(ctx context.Context) error {
	var accumulatedCollectionElements []<%= collection_element_type %>

  initialURL := col.client.buildURL(<%= collection_var_prefix || collection_element_uncapitalized %>ListPath <%= collection_args.any? ? ', ' + collection_args.map { |arg, _| "col.#{arg}" }.join(', ') : '' %>)
	url := col.client.applyParams(
		initialURL,
		col.params,
	)

	response, body, err := col.client.buildAndExecRequestWithResponse(ctx, "GET", url, nil)
	if err != nil {
		return err
	}

	if err := json.Unmarshal(body, &accumulatedCollectionElements); err != nil {
		return err
	}

	col.clean = false
	col.collection = accumulatedCollectionElements
	col.rels = hyperHeaderParser(response.Header)

	return nil
}

func (col *<%= collection_type_name_plural %>CollectionHandler) navigate(ctx context.Context, name string) ([]<%= collection_element_type %>, error) {
	if col.IsClean() {
		if err := col.Refresh(ctx); err != nil {
			return nil, err
		}
	}

	if err := col.applyRel(name); err != nil {
		return nil, err
	}

	if err := col.Refresh(ctx); err != nil {
		return nil, err
	}

	return col.collection, nil
}

func (col *<%= collection_type_name_plural %>CollectionHandler) applyParam(name, value string) {
	if value == "" {
		delete(col.params, name)
	} else {
		col.params[name] = value
	}
}

func (col *<%= collection_type_name_plural %>CollectionHandler) applyRel(name string) error {
	if !col.hasRel(name) {
		return fmt.Errorf("No rel for: %s", name)
	}

	url, err := url.Parse(col.rels[name])

	if err != nil {
		return err
	}

	col.applyParam("page", url.Query().Get("page"))
	col.applyParam("per_page", url.Query().Get("per_page"))

	return nil
}

func (col *<%= collection_type_name_plural %>CollectionHandler) hasRel(name string) bool {
	if _, ok := col.rels[name]; ok {
		return true
	}

	return false
}
